<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.index.security.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.index.security.model.User">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="nickName" jdbcType="VARCHAR" property="nickname"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="proprety" jdbcType="VARCHAR" property="proprety"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>
        <result column="photoId" jdbcType="VARCHAR" property="photoid"/>
        <result column="telephone" jdbcType="VARCHAR" property="telephone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="registrationTime" jdbcType="TIMESTAMP" property="registrationtime"/>
        <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime"/>
        <result column="updateBy" jdbcType="VARCHAR" property="updateby"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.index.security.model.User">
        <result column="password" jdbcType="LONGVARCHAR" property="password"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, username, nickName, sex, proprety, role, photoId, telephone, email, registrationTime,
    updateTime, updateBy
  </sql>
    <sql id="Blob_Column_List">
    password
  </sql>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <select id="findByUserName" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where username = #{username,jdbcType=VARCHAR}
    </select>
    <select id="selectAll" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
    </select>

    <insert id="insert" parameterType="com.index.security.model.User">
    insert into user (id, username, nickName, 
      sex, proprety, role, 
      photoId, telephone, email, 
      registrationTime, updateTime,
      updateBy, password)
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{proprety,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}, 
      #{photoid,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{registrationtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP},
      #{updateby,jdbcType=VARCHAR}, #{password,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.index.security.model.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="nickname != null">
                nickName,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="proprety != null">
                proprety,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="photoid != null">
                photoId,
            </if>
            <if test="telephone != null">
                telephone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="updatetime != null">
                updateTime,
            </if>
            <if test="updateby != null">
                updateBy,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>
            <if test="proprety != null">
                #{proprety,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                #{role,jdbcType=VARCHAR},
            </if>
            <if test="photoid != null">
                #{photoid,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="updatetime != null">
                #{updatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateby != null">
                #{updateby,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.index.security.model.User">
        update user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                nickName = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=VARCHAR},
            </if>
            <if test="proprety != null">
                proprety = #{proprety,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=VARCHAR},
            </if>
            <if test="photoid != null">
                photoId = #{photoid,jdbcType=VARCHAR},
            </if>
            <if test="telephone != null">
                telephone = #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="updatetime != null">
                updateTime = #{updatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateby != null">
                updateBy = #{updateby,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.index.security.model.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      nickName = #{nickname,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      proprety = #{proprety,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      photoId = #{photoid,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      updateTime = #{updatetime,jdbcType=TIMESTAMP},
      updateBy = #{updateby,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
    <update id="updatePassword" parameterType="com.index.security.model.User">
    update user
    set password = #{password,jdbcType=VARCHAR},
      updateTime = #{updatetime,jdbcType=TIMESTAMP},
      updateBy = #{updateby,jdbcType=VARCHAR}
    where username = #{username,jdbcType=VARCHAR}
  </update>
</mapper>